#include "CharacterPacket.hpp"
#include "Constants.hpp"
#include "ItemDataProvider.hpp"
#include "Converter.hpp"
#include "Time.hpp"

namespace els {

	namespace CharacterPacket {

		PacketBuilder playerDataAck(Player* player) { // 0x2A
			std::cout << "Processing 0x19 0" << std::endl;
			PacketBuilder pb;
			pb
				.writeInt(0)

				.writeLong(player->getAccountID()) // 2 不是帳號ID
				.writeByte(0)
				.writeLong(player->getPlayerID())
				.writeInt(0/*player->getPlayerID()*/) // 17113 不是角色id
				.writeByte((unsigned char)player->getUnitClass())
				.writeInt(1500/*0*/) // 競技分數 1500 = E
				.writeElsWString(player->getName())
				.writeElsString(player->getIP())
				.writeShort(8133) // player UDP listen port
				.writeInt(player->getED())
				.writeByte(player->getLevel())

				.writeInt(/*Constants::expTable[player->getLevel()].second + */player->getEXP() + 1) // TOTAL EXP 經驗值小於1的話會被送去魔奇
				.writeInt(12345) // 持有的VP
				.writeInt(123456) // 總共獲得的VP
				.writeInt(player->getSkillInv()->getRemainingSP()) // 可用SP
				.writeInt(0) // 戰神的祝福追加可用SP
				.writeInt(0)
				.writeElsString("2000-01-01 00:00:00") // 戰神的祝福到期時間
				.writeInt(0/*Constants::expTable[player->getLevel()].second*/) // total exp for this level
				.writeInt(0/*Constants::expTable[player->getLevel() + 1].second*/) // total exp for next level
				.writeInt(0)

				.writeInt(player->getMaxHP())
				.writeInt(player->getBaseAttack())
				.writeInt(player->getBaseMagicAttack())
				.writeInt(player->getBaseDef())
				.writeInt(player->getBaseMagicDef())

			    .writeInt(0)
				.writeInt(0)
				.writeInt(0)
				.writeInt(0)
				.writeInt(0)
				;
				std::cout << "Processing 0x19 1" << std::endl;
	     	pb
				.writeInt(player->getMap()) // MAP_ID
				.writeByte(1/*17*/) // spawnpoint
				.writeShort(0) // WORLD_ID ?
				.writeInt(0)
				.writeInt(0)
				;
			pb
				.writeInt(0) // 通關過的副本資訊 -> int(dungeonid) int(dungeonid) byte str(日期) bool
				.writeInt(0) // 通關過的副本資訊 -> int(dungeonid) str bool
				;
			/* // dungeons that we have pwned
			unsigned char packet[562] = { 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x33, 0x85, 0x06, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x3A, 0x00, 0x32, 0x00, 0x36, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x75, 0x76, 0x00, 0x00, 0x75, 0x76, 0x00, 0x00, 0x68, 0x9F, 0x08, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x34, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x75, 0x77, 0x00, 0x00, 0x75, 0x77, 0x00, 0x00, 0x68, 0x9F, 0x08, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x34, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x75, 0x78, 0x00, 0x00, 0x75, 0x78, 0x00, 0x00, 0x68, 0x9F, 0x08, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x34, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x75, 0x80, 0x00, 0x00, 0x75, 0x80, 0x00, 0x00, 0x50, 0x9B, 0x06, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x3A, 0x00, 0x33, 0x00, 0x32, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x75, 0x8A, 0x00, 0x00, 0x75, 0x8A, 0x00, 0x01, 0x56, 0x5C, 0x06, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x3A, 0x00, 0x35, 0x00, 0x30, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x75, 0x8B, 0x00, 0x00, 0x75, 0x8B, 0x00, 0x01, 0x56, 0x5C, 0x06, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x3A, 0x00, 0x35, 0x00, 0x30, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x75, 0x8C, 0x00, 0x00, 0x75, 0x8C, 0x00, 0x01, 0x56, 0x5C, 0x06, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x3A, 0x00, 0x35, 0x00, 0x30, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x76, 0x00, 0x00, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x78, 0x00, 0x00, 0x75, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x80, 0x00, 0x00, 0x75, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x8A, 0x00, 0x00, 0x75, 0x8A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x8C, 0x00, 0x00, 0x75, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
			pb.writeBytes(packet, 562);
				/*
				.writeInt(0) // counter
				.writeInt(0)
				.writeInt(0) // some counter for something
				*/

			pb.writeInt(player->getInv()->getQuantity(9)); // equipped equips
			std::cout << "Processing 0x19 2" << std::endl;
			for (int i = 0; i < player->getInv()->getMaxSlots(9); i++) {
				int uid = (*player->getInv()->getInventory(9))[i];
				if (uid == -1) continue;
				else {
					auto item = &player->getInv()->getInventory()->find(uid)->second;
					bool isDecorative = ItemDataProvider::isDecorative(item->getItemID());
					pb
						.writeInt(item->getPosition())
						.writeLong(item->getUniqueID())
						.writeByte(9)
						.writeByte/*Short*/(item->getPosition())
						.writeInt(item->getItemID());
					if (isDecorative) {
						pb.writeByte(0);
					}
					else {
						pb.writeByte(1);
					}

					pb
						.writeInt(0) // 數量
						.writeShort(item->getEndurance()) // 耐久度
						.writeByte(item->isSealed() ? 100 : 0) // 封印
						.writeByte(item->getUpgrades()) // 強化

						// 屬性
						.writeByte(item->getAttribute(0)) // ENCHANT_TYPE
						.writeByte(item->getAttribute(1)) // ENCHANT_TYPE
						.writeByte(item->getAttribute(2)) // ENCHANT_TYPE

						.writeInt(0); // size -> short 魔法石(SOCKET_DATA_TYPE)

					if (isDecorative) {
						pb.writeShort/*Int*/(7);
					}
					else {
						pb.writeShort/*Int*/(0);
					}

					if (item->getExpiry() != "0000-00-00 00:00:00") {
						pb.writeElsString(item->getExpiry());
					}
					else {
						pb.writeElsString("");
					}
				}
			}
			std::cout << "Processing 0x19 3" << std::endl;
			// skill slots
			for (int i = 0; i < 8; i++) {
				int skillid = player->getSkillInv()->getEquippedSkills()[i];
				pb.writeShort(skillid);
				pb.writeByte(player->getSkillInv()->getSkillLevel(skillid)); // skill level
			}

			pb
				.writeElsString("2000-01-01 00:00:00") // B欄到期日期
				.writeByte(2/*0*/); // 0 = 沒B欄 1 = 有期限的B欄 2 = 永久B欄
				
			pb.writeInt(0/*player->getSkillInv()->getSkillInventory()->size()*/); // number of skills?
				
/*			for (auto skill : *player->getSkillInv()->getSkillInventory()) {
			     pb.writeShort(skill.first);
			     pb.writeByte(skill.second);
		    }*/

			pb.writeInt(0); // number of skills? 2009版沒有這個

			pb.writeInt(0); // 鎖技? int 2009版沒有這個
			
			std::cout << "Processing 0x19 4" << std::endl;
			pb
				.writebool(true/*false*/)
				.writeInt(4800) // 最大疲勞值
				.writeInt(4800) // 目前疲勞值
				.writebool(true/*false*/)
				.writeShort(10/*0*/) // 目前穿在身上的稱號

				.writeInt(0)
				.writeElsWString(L"") // 公會
				.writeByte(0)
				.writeInt(0);

			std::cout << "Processing 0x19 5" << std::endl;
/*			pb
				.writeInt(0)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeByte(0)
				.writeLong(0)
				.writeLong(0)
				.writeByte(0)
				.writeInt(1) // dungeons
				.writeInt(0x7530)
				.writeInt(0x7530)
				.writeLong(0)
				.writeByte(0)
				.writeInt(-1)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeShort(0)
				.writeInt(2)
				.writeInt(-1)
				.writeLong(0)
				.writeInt(0)
				.writeShort(0)
				.writeByte(0)
				.writeInt(0) // added
				.writeElsString(player->getCreationDate())
				.writeInt(player->getED())
				.writeElsString(player->getLastLogin());*/

			// 最大道具欄位
			pb
				.writeInt(7/*15*/); // size
				
			for (int i = 1; i <= 7; i++) {
				pb
					.writeInt(i)
					.writeInt(player->getInv()->getMaxSlots(i));
			}

/*			pb
				.writeInt(8)
				.writeInt(8)
				.writeInt(9)
				.writeInt(21)
				.writeInt(10)
				.writeInt(3)
				.writeInt(11)
				.writeInt(3)
				.writeInt(12)
				.writeInt(24)
				.writeInt(13)
				.writeInt(0)
				.writeInt(14)
				.writeInt(48)
				.writeInt(15)
				.writeInt(4);*/

//				std::cout << player->getInv()->getQuantity(9);
				pb.writeInt(player->getInv()->getQuantity(9)); // equips

				std::cout << "Processing 0x19 6" << std::endl;
				for (int i = 0; i < player->getInv()->getMaxSlots(9); i++) {
					int uid = (*player->getInv()->getInventory(9))[i];
					if (uid == -1) continue;
					else {
						auto item = &player->getInv()->getInventory()->find(uid)->second;
						bool isDecorative = ItemDataProvider::isDecorative(item->getItemID());
						pb
							.writeLong(item->getUniqueID())
							.writeLong(item->getUniqueID())
							.writeByte(9)
							.writeByte/*Short*/(item->getPosition());
						pb
							.writeInt(item->getItemID());

						if (isDecorative) {
							pb.writeByte(0);
						}
						else {
							pb.writeByte(1);
						}
						pb.writeInt(1); // 數量

						if (isDecorative) {
							pb.writeShort(0);
						}
						else {
							pb.writeShort(item->getEndurance());
						}

						pb
							.writeByte(item->isSealed() ? 100 : 0)
							.writeByte(item->getUpgrades())

							// 屬性
							.writeByte(item->getAttribute(0))
							.writeByte(item->getAttribute(1))
							.writeByte(item->getAttribute(2))

							.writeInt(0) // size -> short 魔法石 socket
//							.writeShort(1)
                             ;

						if (isDecorative) {
							pb.writeShort(7);
						}
						else {
							pb.writeShort(0);
						}

						if (item->getExpiry() != "0000-00-00 00:00:00") {
							pb.writeElsString(item->getExpiry());
						}
						else {
							pb.writeElsString("");
						}
					}

				}

				std::cout << "Processing 0x19 7" << std::endl;
				pb
					.writeInt(30) // 復活石
					.writeInt(0) // 2009版沒有這個
					.writeElsString("2000-01-01 00:00:00") //有期限的復活石到期時間? 2009版沒有這個
//					.writeInt(1)
                     ;
				
				pb
					.writeInt(1/*0*/) // size -> int long | int -> int byte bool 好像是任務
					.writeInt(1680)
					.writeLong(Time::timestamp_now())
					.writeInt(1)
					.writeInt(1680)
					.writeByte(1)
					.writebool(true)

					.writeInt(1/*0*/) // size -> int int long 好像是史詩任務
					.writeInt(1680)
					.writeInt(1)
					.writeLong(Time::timestamp_now())

					.writeInt(1/*0*/) // size -> int | int -> int short bool
					.writeInt(1680)
					.writeInt(1)
					.writeInt(1680)
					.writeShort(1)
					.writebool(true)

					.writeInt(1/*0*/) // size -> int str long bool
					.writeInt(1680)
					.writeElsString("1680_02")
					.writeLong(Time::timestamp_now())
					.writebool(true)

					;

				std::cout << "Processing 0x19 8" << std::endl;
				pb.writeInt(player->getSkillInv()->getSkillInventory()->size()); // number of skills

				for (auto skill : *player->getSkillInv()->getSkillInventory()) {
					pb
						.writeShort(skill.first) // 技能ID
						.writeByte(skill.second) // 技能等級
						.writeByte(0); // 不知道
				}

				pb
					.writeInt(0) //size -> short

					// 技術筆記本 0 = 沒有技術筆記本 等級20 第一頁 等級30 第二頁 等級40 第三頁 等級50 第四頁 技術筆記本 2009版沒有這個
					.writeByte(4/*0*/)

					.writeInt(1/*0*/) //size -> byte int(itemid) 技術筆記本 2009版沒有這個
					.writeByte(2) // 頁數 0 = 第一頁 1 = 第二頁 2 = 第三頁 3 = 第四頁
					.writeInt(605001) // 技術筆記本道具ID

					.writeInt(1/*0*/) //size -> long str
					.writeLong(2)
					.writeElsWString(L"瑞舉")

				    // option 0 = 拒絕 1 =開啟
					.writeByte(1/*0*/) // 朋友邀請
					.writeByte(1/*0*/) // 公會邀請
					.writeByte(1/*0*/) // 隊伍邀請
					.writeByte(1/*0*/) // 交易

					.writebool(true)
					.writeLong(Time::timestamp_now())

					.writeInt(1/*0*/) //size -> long byte str bool str
					.writeLong(2)
					.writeByte(1)
					.writeElsWString(L"瑞舉")
					.writebool(true)
					.writeElsWString(L"瑞舉1")

					.writebool(true)

					.writeInt(1/*0*/) //size -> int str bool
					.writeInt(1670)
					.writeElsString("1670_02")
					.writebool(true)

					.writeInt(0) //size -> int int bool

					.writeInt(1/*0*/) //size -> int int int long long str byte byte
					.writeInt(1)
					.writeInt(1)
					.writeInt(1)
					.writeLong(2)
					.writeLong(2)
					.writeElsWString(L"瑞舉")
					.writeByte(1)
					.writeByte(1)
					
					// 下面這三個一起在sub裡面
					.writeInt(0) //size -> long long str byte byte byte 這是好友

					.writeInt(0) //size -> byte str

					.writeInt(0) //size -> long str byte str str

					;
					
					pb.finishPacket(0x19);

					std::cout << "0x19 DONE" << std::endl;

			return pb;

		}

		PacketBuilder unknown_0x2B(Player* player) { // seems to be quest data

			PacketBuilder pb;
			pb
				.writeInt(0)
				.writeInt(1)
				.writeInt(11000)
				.writeInt(0)
				.writeInt(player->getPlayerID())

				.writeInt(1)
				.writeInt(11000)
				.writeShort(0)

				.writeInt(0)

				.writeInt(6) // size

				.writeInt(1)
				.writeInt(8942)
				.writeInt(2)
				.writeInt(8955)
				.writeInt(3)
				.writeInt(0x2305)
				.writeInt(4)
				.writeInt(0x77A0)
				.writeInt(5)
				.writeInt(0x77E3)
				.writeInt(6)
				.writeInt(0x77EE)

				.finishPacket(0x2B);

			return pb;

		}

		PacketBuilder unknown_0x2C() {

			PacketBuilder pb;
			pb
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.finishPacket(0x2C);

			return pb;

		}

		PacketBuilder unknown_0x2D(Player* player) {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.writeInt(0)
				.writeByte(1)
				.writeByte(1)
				.writeByte(1)
				.writeByte(1)
				.writeByte(1)
				.writeByte(1)
				.writeByte(1)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeInt(1)
				.writeInt(player->getMaxHP())
				.writeInt(31500)
				.writeInt(300)
				.writeInt(300) // mp??
				.writeInt(9)
				.writeInt(0)
				.writeInt(0)
				.writeShort(4); // size

			for (int i = 0; i < 4; i++) {
				pb
					.writeInt(i)
					.writeInt(0);
			}

			pb
				.writeLong(0)
				.writeInt(0)
				.finishPacket(0x2D);

			return pb;
		}

		PacketBuilder unknown_0x2E() {

			PacketBuilder pb;
			pb
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeByte(0x25)
				.writeLong(0)
				.writeLong(0)
				.writeByte(0)
				.writeShort(1)
				.writeByte(0)
				.writeInt(3)
				.writeLong(0)
				.writeLong(0)
				.writeByte(1)
				.writeLong(0)
				.writeLong(0)
				.writeShort(0)
				.finishPacket(0x2E);

			return pb;

		}

		PacketBuilder unknown_0x29() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0x29);

			return pb;
		}

		PacketBuilder unknown_0x136() {

			PacketBuilder pb;
			pb.finishPacket(0x136);

			return pb;

		}

		PacketBuilder unknown_0x2D8() {

			PacketBuilder pb;
			pb
				.writeByte(0)
				.writeInt(1)
				//.writeInt(0x0B)
				.writeInt(0x30E58)
				/*.writeInt(0x3115A)
				.writeInt(0x3115B)
				.writeInt(0x3115C)
				.writeInt(0x3115D)
				.writeInt(0x3115E)
				.writeInt(0x3115F)
				.writeInt(0x31164)
				.writeInt(0x31165)
				.writeInt(0x31178)
				.writeInt(0x31182)
				*/
				.finishPacket(0x2D8);

			return pb;

		}

		PacketBuilder unknown_0x223() {

			unsigned char packet[0x54A] = { 0x01, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x7E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x15, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x86, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x15, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x15, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x8A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x15, 0x8A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x62, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x6C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x76, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x8A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0x8A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x94, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x9E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xA8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xB2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xBC, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0xBC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x27, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x9C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x27, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0xB0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x27, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0xE2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x27, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x28, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x28, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x8C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x28, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xF0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x28, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xFA, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x28, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x29, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x2C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x29, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x68, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x29, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x72, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x29, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0xDA, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2A, 0xDA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x2A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2B, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x70, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2B, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x7A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2B, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x84, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2B, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x8E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2B, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x98, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2B, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2B, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x70, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x7A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x7F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x84, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x8E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x93, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x98, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xA2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0xA2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0x24, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4F, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x31, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x32, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x33, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x39, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x1A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x24, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x2E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x42, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x4C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x56, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xF4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x88, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xFE, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x88, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x89, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x89, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x4A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x54, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x5E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x68, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x6D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x7C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x86, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0xC2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0xC2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0xCC, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0xD6, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0xD6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0xE0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0xEA, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x01, 0x87, 0x4A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x87, 0x4A, 0x00, 0x00, 0x00 };

			PacketBuilder pb;
			pb.writeBytes(packet, 0x54A).finishPacket(0x223);
			return pb;

		}

		PacketBuilder unknown_0x26F() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0x26E);
			return pb;
		}

		PacketBuilder unknown_0xF5(int number) {

			PacketBuilder pb;
			pb
				.writeInt(number)
				.finishPacket(0xF5);
			return pb;
		}

		PacketBuilder unknown_0x1DB() {

			PacketBuilder pb;
			pb
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.finishPacket(0x1A8/*0x1DB*/);
			return pb;

		}

		PacketBuilder unknown_0xF6(Player* player, int number) {

			PacketBuilder pb;
			pb
				.writeInt(number)
				.writeInt(0)
				.writeInt(player->getPlayerID())
				.writeInt(1)
				.writeInt(number)
				.writeInt(0)
				.writeShort(0)
				.finishPacket(0xF6);
			return pb;
		}

		PacketBuilder unknown_0x3A0() {

			PacketBuilder pb;
			pb
				.writeInt(1)
				.writeLong(0)
				.writeInt(0xD5)
				.writeLong(0)
				.writeByte(0)
				.writeInt(0xCD)
				.writeInt(0)
				.writeInt(0x53930DA1)
				.writeInt(0)
				.writeInt(0x53930DA1)
				.finishPacket(0x39F);

			return pb;


		}

		PacketBuilder 轉職() {

			PacketBuilder pb;
			pb
				.writeInt(0)

				.writeInt(0)
				.writeInt(0)
				.writeLong(0)
				
				// writecharacterdata

				.finishPacket(0xE4);

			return pb;


		}


	}


}