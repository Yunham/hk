#include "DungeonPacket.hpp"
#include "DungeonDataProvider.hpp"
#include "ItemDataProvider.hpp"
#include "Config.hpp"
#include "PVPRoom.hpp"
#include "World.hpp"
#include "Time.hpp"
#include "Converter.hpp"

namespace els {

	namespace DungeonPacket {

		PacketBuilder tutorialAck(std::string serial, int dID, Player* player) {

			PacketBuilder pb;
			pb
				.writeInt(0)

				.writeByte(1)

				// 這是long = 房間ID
				.writeByte(0)
				.writeByte(2)
				.writeByte(1)
				.writeByte(0)
				.writeInt(0x21)

				.writeInt(0)
				.writeElsString("tutorial") // 房間名字
				.writeByte(3)
				.writebool(false)
				.writebool(false)
				.writeElsString(serial)
				.writeByte(4) // 房間最大人數
				.writeByte(1) // 房間現在人數
				.writeElsString(/*player->getIP()*/Config::serverIP)
				.writeShort(9101)
//				.writebool(false)
				.writeByte(0)
				.writebool(false)
				.writeInt(-1)
				.writeByte(0)
				.writebool(false)
				.writeInt(0x469C3E00) // float 19999
				.writeShort(0)
				.writeShort(0)
				.writeByte(0)
				.writeInt(dID) // dungeon ID
				.writeByte(1)
				.writeByte(0)
				.writeLong(0)
//				.writeInt(0)
//				.writeInt(0) // size
//				.writebool(false)

				.writeInt(1/*4*/) // 角色數量

				.writeByte(0) // 角色index
				.writeByte(3) // 角色狀態
				.writebool(true)
				.writebool(true)
				.writebool(false)
				.writebool(false)
				.writeInt(0)

				.writeLong(player->getAccountID()) // roomid?
				.writeLong(player->getAccountID())
//				.writeShort(0)
				.writeByte(0)
				.writebool(/*true*/false)
				.writeByte(0)
				.writeLong(player->getPlayerID())
				.writeInt(player->getPlayerID())
				.writeByte((unsigned char)player->getUnitClass())
				.writeInt(0)
				.writeElsWString(player->getName())
//				.writeInt(10) // ?
				.writeElsString(player->getIP())
				.writeShort(0) // port
//				.writeElsString("192.168.1.3") // ???
//				.writeShort(0) // port
                .writeByte(player->getLevel())

                .writeInt(player->getMaxHP())
                .writeInt(player->getBaseAttack())
                .writeInt(player->getBaseMagicAttack())
                .writeInt(player->getBaseDef())
                .writeInt(player->getBaseMagicDef())
                ;

			pb.writeInt(player->getInv()->getQuantity(9)); // equipped equips

			for (int i = 0; i < player->getInv()->getMaxSlots(9); i++) {
				int uid = (*player->getInv()->getInventory(9))[i];
				if (uid == -1) continue;
				else {
					auto item = &player->getInv()->getInventory()->find(uid)->second;
					bool isDecorative = ItemDataProvider::isDecorative(item->getItemID());
					pb
						.writeInt(item->getPosition())
						.writeLong(item->getUniqueID())
						.writeByte(9)
						.writeByte/*Short*/(item->getPosition());

					pb.writeInt(item->getItemID());
					if (isDecorative) {
						pb.writeByte(0);
					}
					else {
						pb.writeByte(1);
					}

					pb
						.writeInt(0)
						.writeShort(item->getEndurance())
						.writeByte(0)
						.writeByte(0)

						// 屬性
						.writeByte(0)
						.writeByte(0)
						.writeByte(0)

						.writeInt(0); // size -> short 魔法石 socket 

					if (isDecorative) {
						pb.writeShort/*Int*/(7);
					}
					else {
						pb.writeShort/*Int*/(0);
					}

					if (item->getExpiry() != "0000-00-00 00:00:00") {
						pb.writeElsString(item->getExpiry());
					}
					else {
						pb.writeElsString("");
					}
				}
			}

			// skill slots
			for (int i = 0; i < 8; i++) {
				int skillid = player->getSkillInv()->getEquippedSkills()[i];
				pb.writeShort(skillid);
				pb.writeByte(player->getSkillInv()->getSkillLevel(skillid)); // skill level
			}

			pb
				.writeElsString("2000-01-01 00:00:00") // B欄到期日期
				.writeByte(2/*0*/); // 0 = 沒B欄 1 = 有期限的B欄 2 = 永久B欄

			pb
				.writeInt(0); // number of skills
			pb
				.writeInt(0); // number of skills

			pb.writeInt(0); // 技術筆記本?

			pb
				.writeInt(4800) // 角色現在疲勞值
				.writeInt(4800) // 疲勞值上限
				.writebool(false) // 網咖
				.writebool(false/*m_leader*//*false*/) // true的話不會讀取== 主線?
				.writeInt(0) // size -> byte float 好像是角色位置 2009版這邊是3個float
				.writebool(false/*true*/)
				.writebool(false/*true*/)
				.writeInt(0) // size -> int int -> int int
				.writeShort(10) // title

				.writeElsWString(L"") // guild
				.writeInt(0)
				.writeByte(0);

			pb.writeElsString("");

			pb.finishPacket(0x44/*0x5E*/);

			return pb;

		}

		PacketBuilder tutorialStartAck() {
			
			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0x75);

			return pb;

		}

		PacketBuilder tutorialStartAck2(Player* player) {
			bool empty = false;
//			std::cout << "MapId: " << room->getMapId() << std::endl;

			PVPRoom* room = World::getPVPRoom(4);
			auto *players = room->getPlayers();

			PacketBuilder pb;
			pb
				.writeByte(5)
				.writeInt(0/*0*/) // 疲勞?
				.writeInt(0/*9101*//*4800*/) // 疲勞?
				.writeShort(/*0*/room->getMapId() == 65535 ? 73 : room->getMapId()) // WORLD_ID

/*				.writeInt(1);
			    player->setState(4);
			    player->writeData(pb);*/

				.writeInt(room->getPlayerSize());
			for (auto p : *players) {
				p.second->setState(4);
				p.second->writeData(pb);
			}

/*			pb.writeInt(8);
			for (int i = 0; i < 8; i++) {
				for (auto p : *players) {
					if (p.second->getIndex() == i) {
						player->setState(4);
						p.second->writeData(pb);
						break;
					}
					else {
						empty = true;
					}
				}
				if (empty) {
					room->writeEmptyPlayerData(pb, i, 1);
					empty = false;
				}
			}*/

			pb.writeInt(0); // 這個是裝備SIZE = 要修理的裝備還是什麼?

			pb.finishPacket(0x76);

			return pb;
		}

		PacketBuilder dungeonLoadAck() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0x7B);

			return pb;
		}

		PacketBuilder dungeonLoad(Player* player, int load) {

			PacketBuilder pb;
			pb
				.writeLong(player->getPlayerID())
				.writeInt(load)
				.finishPacket(0x7C);

			return pb;

		}

		PacketBuilder unknown_0x3A0(Player* player) {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.writeInt(player->getPlayerID())
				.writeInt(1)
				.writeLong(0)
				.writeInt(0xD5)
				.writeLong(0)
				.writeByte(0)
				.writeInt(0xCD)
				.writeInt(0)
				.writeInt(Time::timestamp_now())
				.writeInt(0)
				.writeInt(Time::timestamp_now())
				.writeInt(player->getMaxHP())
				.writeInt(0x26E)
				.writeInt(0x301)
				.writeInt(0xB0)
				.writeInt(0x7C)
				.finishPacket(0x3A0);

			return pb;

		}

		PacketBuilder dungeonLoadDone() {

			PacketBuilder pb;
			pb.finishPacket(0x7D);
			
			return pb;

		}

		PacketBuilder unknown_0x35A() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.writeByte(3)
				.writeLong(0)
				.writeLong(0)
				.finishPacket(0x35A);

			return pb;

		}

		PacketBuilder dungeonEnter(Player* player) {
			PVPRoom* room = World::getPVPRoom(4);
			auto *players = room->getPlayers();
			bool empty = false;
			PacketBuilder pb;
			pb
				.writeByte(6)

/*				.writeInt(1); // 角色size
				player->setState(5);
				player->writeData(pb);*/

				.writeInt(room->getPlayerSize());
				for (auto p : *players) {
					p.second->setState(5);
					p.second->writeData(pb);
				}

/*				.writeInt(8);
			for (int i = 0; i < 8; i++) {
				for (auto p : *players) {
					if (p.second->getIndex() == i) {
						player->setState(5);
						p.second->writeData(pb);
						break;
					}
					else {
						empty = true;
					}
				}
				if (empty) {
					room->writeEmptyPlayerData(pb, i, 1);
					empty = false;
				}
			}*/

			pb
				.finishPacket(0x80);

			return pb;

		}

		PacketBuilder SpawnMonsterAck() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0x9E/*0xB8*/);

			return pb;

		}

		PacketBuilder SpawnMonster() { // 召喚怪物

//			unsigned char packet[2105] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x49, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x47, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x53, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x53, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x53, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x47, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x15, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x02, 0x81, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x49, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x47, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x47, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x8D, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x8D, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x8D, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x6A, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x6A, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x6A, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x43, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x15, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x02, 0x7F, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00 };

			PacketBuilder pb;
//			pb.writeBytes(packet, 2105).finishPacket(0x9F);

			pb
				.writeInt(0)
				.writeInt(1) // 不知道 不是size

				.writeInt(1) // 第一個size

				// for
				.writeInt(0) // ?
				.writeInt(1/*0*/) // 上面size裡面的size 怪物數量

				    // for
				.writeInt(2) // monsteroid
				.writeInt(395/*79*//*74*//*73*/) // NPC_UNIT_ID 怪物id 怪物代碼 KOG叫他npcid==
				.writeByte(0/*40*//*60*//*9*/) // 怪物等級
				.writeFloat(0) // X
				.writeFloat(0) // Y
				.writeFloat(0) // Z
				.writeInt(2/*0*/) // 0
				.writebool(true/*false*/)
				.writeFloat(0) // 不知道什麼 可能是秒數 預設是0
				.writeByte(2/*0*/)
				.writebool(true/*false*/)
				.writebool(true/*false*/)
				.writeFloat(0) // X
				.writeFloat(-280) // Y
				.writeFloat(0) // Z
				.writebool(true/*false*/)
				.writebool(true/*false*/)
				.writebool(true/*false*/)
				.writebool(true/*false*/)
				.writebool(true/*false*/)
				.writebool(true/*false*/)
				.writeFloat(-1) // 怪物體型大小 真的要改的話改1.XX就好 2以上太大根本打不到人== 預設是-1
				.writeByte(2/*0*/)
				.writeByte(2/*0*/)
				.writeLong(-1) // playerid? ownerid?
				.writeByte(2/*0*/)
				// 上面兩個size到這結束

				.writeInt(1/*0*/) // 怪物屬性 size

				//for
				.writeInt(2) // 怪物oid
				.writeByte(2) // 屬性 ENCHANT_TYPE
				.writeByte(2) // 屬性 ENCHANT_TYPE
				.writeByte(5) // 屬性 ATTRIB_ENCHANT_TYPE
				.writeByte(5) // 屬性 ATTRIB_ENCHANT_TYPE
				//size結束

				.writeInt(4/*0x3F800000*/) // 0x3F800000 轉成float = 1
				.writebool(true)

				.finishPacket(0x9F);

			return pb;

		}

		PacketBuilder unknown_0xBB() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0xA1/*0xBB*/);
			
			return pb;

		}

		PacketBuilder unknown_0xBC(Player* player) {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.writeLong(player->getPlayerID())
				.finishPacket(0xA2/*0xBC*/);

			return pb;

		}

		PacketBuilder unknown_0xBD() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0xA3/*0xBD*/);

			return pb;

		}

		PacketBuilder unknown_0xBF() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0xA5/*0xBF*/);

			return pb;

		}

		PacketBuilder unknown_0xC0(int a1) {

			PacketBuilder pb;
			pb
				.writeByte(a1)
				.finishPacket(0xA6/*0xC0*/);

			return pb;

		}

		PacketBuilder unknown_0xC2() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0xA8/*0xC2*/);

			return pb;

		}

		PacketBuilder unknown_0xC3(int a1) {

			PacketBuilder pb;
			pb
				.writeShort(a1) // byte byte
				.finishPacket(0xA9/*0xC3*/);

			return pb;

		}

		PacketBuilder unknown_0xC5() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0xAB/*0xC5*/);

			return pb;

		}

		PacketBuilder unknown_0xC6(int a1) {

			PacketBuilder pb;
			pb
				.writeByte(a1)
				.finishPacket(0xAC/*0xC6*/);

			return pb;

		}

		PacketBuilder TimeUpdate(float second/*unsigned char a1, unsigned char a2*/) { // 沒定時傳這個角色會不能移動 好像是五秒要傳一次

			PacketBuilder pb;
			pb
				// 秒數 float
				.writeFloat(second)
//				.writeShort(0x469C)
//				.writeByte(a1)
//				.writeByte(a2)

				.finishPacket(0x86);

			return pb;
		}

		PacketBuilder unknown_0xB2() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0xB2);

			return pb;
		}

		PacketBuilder unknown_0xB3(int n1, int n2, int n3, int n4) {

			PacketBuilder pb;
			pb
				.writeInt(1)
				.writeInt(4)
				.writeInt(n1)
				.writeInt(n2)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeShort(1)
				.writeByte(1)
				.writeInt(0)
				.writeByte(-1)
				.writeLong(0)
				.writeLong(0)
				.writeShort(0)
				.writeInt(n3)
				.writeInt(0x200)
				.writeLong(-1)
				.writeByte(-1)
				.writeInt(0)
				.writeInt(n4)
				.writeLong(0)
				.writeInt(0)
				.writeShort(0)
				.writeByte(0)
				.finishPacket(0xB3);

			return pb;

		}

		PacketBuilder dungeonList(int reg, int dungeonID) {

			PacketBuilder pb;
	
			auto region = DungeonDataProvider::getRegion(reg);

			if (dungeonID == 0) { // for dungeon gates
				pb
					.writeInt(region->size() + 1)
					.writeInt(0)
					.writeInt(0)
					.writeShort(0);
			}
			else {
				pb.writeInt(region->size());
			}

			for (auto dungeon : *region) {

				pb
					.writeInt(dungeon.first)
					.writeInt(dungeon.first)
					.writeByte(0)
					.writeByte(dungeon.second);

			}

			pb.finishPacket(0x38A);

			return pb;

		}

		PacketBuilder dungeonEntryAck() {

			PacketBuilder pb;
			pb
				.writeLong(0)
				.writeLong(0)
				.finishPacket(0x37D);

			return pb;
		}

		PacketBuilder dungeonStartCountdown(int toStart) {

			PacketBuilder pb;
			pb
				.writeShort(2)
				.writeByte(1)
				.writeInt(0)
				.writeByte(0)
				.writeByte(toStart)
				.writeByte(1)
				.finishPacket(0x38D);

			return pb;
		}

		PacketBuilder dungeonPartyData(Player* player, int dungeonID) {

			PacketBuilder pb;
			pb
				.writeShort(0x160)
				.writeByte(1)
				.writeShort(2)
				.writeByte(1)
				.writeByte(0)
				.writeInt(12)
				.writeInt(0)
				.writeShort(0)
				.writeByte(0)
				.writeInt(0x103CD690) // ??
				.writeShort(0xC720)
				.writeByte(0)
				.writeInt(0x58D594B2)
				.writeByte(0x20)
				.writeByte(0)
				.writeInt(0x58B304C8)
				.writeByte(5)
				.writeInt(0)
				.writeShort(0)
				.writeByte(4)
				.writeByte(1)
				.writeElsString(/*player->getIP()*/Config::serverIP)
				.writeShort(9101/*0x238D*/) // port
				.writeShort(0)
				.writeByte(0)
				.writeInt(-1)
				.writeShort(0)
				.writeByte(0x46) // level limit idk
				.writeShort(0x9C3E)
				.writeByte(0)
				.writeInt(0)
				.writeByte(0)
				.writeInt(dungeonID)
				.writeByte(1)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeByte(0) // added
				.writeInt(0)
				.writeShort(1)
				.writeInt(8)
				.writeShort(4)
				.writeByte(1)
				.writeByte(1)
				.writeLong(0)
				.writeInt(0)
				.writeShort(3)
				.writeInt(0)
				.writeInt(player->getAccountID())
				.writeLong(0)
				.writeByte(0)
				.writeInt(player->getPlayerID())
				.writeInt(player->getPlayerID())
				.writeByte((unsigned char)player->getUnitClass())
				.writeElsWString(player->getName())
				.writeInt(10) // ?
				.writeElsString(player->getIP())
				.writeShort(8133) // port
				.writeElsString("127.0.0.1")
				.writeShort(8133)
				.writeLong(0)
				.writeLong(1)
				.writeLong(0)
				.writeInt(0x7A)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeShort(0x67)
				.writeInt(0)
				.writeInt(Time::timestamp_now())
				.writeInt(0)
				.writeInt(Time::timestamp_now())
				.writeByte(player->getLevel())
				.writeInt(player->getMaxHP())
				.writeInt(player->getBaseAttack())
				.writeInt(player->getBaseMagicAttack())
				.writeInt(player->getBaseDef())
				.writeInt(player->getBaseMagicDef());

			pb.writeInt(player->getInv()->getQuantity(9)); // number of equipped equips
			
			for (int i = 0; i < player->getInv()->getMaxSlots(9); i++) {
				int uid = (*player->getInv()->getInventory(9))[i];
				if (uid == -1) continue;
				else {
					auto item = &player->getInv()->getInventory()->find(uid)->second;
					bool isDecorative = ItemDataProvider::isDecorative(item->getItemID());
					pb
						.writeInt(item->getPosition())
						.writeInt(0)
						.writeInt(item->getUniqueID())
						.writeByte(9)
						.writeShort(item->getPosition())
						.writeInt(item->getItemID());
					if (isDecorative) {
						pb.writeByte(0);
					}
					else {
						pb.writeByte(1);
					}

					pb
						.writeInt(1);
					if (isDecorative) {
						pb.writeShort(0);
					}
					else {
						pb.writeShort(item->getEndurance());
					}
					pb	
						.writeInt(0)
						.writeInt(0)
						.writeInt(0);

					// using masks?

					if (isDecorative) {
						pb
							.writeShort(1)
							.writeShort(7);
					}
					else {
						pb
							.writeShort(1)
							.writeShort(0);
					}

					if (item->getExpiry() != "0000-00-00 00:00:00") {
						pb.writeElsString(item->getExpiry());
					}
					else {
						pb.writeInt(0);
					}

					pb.writeByte(0);
				}

			}
			
			for (int i = 0; i < 8; i++) {
				int skillid = player->getSkillInv()->getEquippedSkills()[i];
				pb
					.writeShort(skillid)
					.writeByte(player->getSkillInv()->getSkillLevel(skillid)); // skill level
			}

			pb
				.writeElsString("2000-01-01 00:00:00")
				.writeByte(0);

			pb.writeInt(player->getSkillInv()->getSkillInventory()->size()); // number of skills

			for (auto skill : *player->getSkillInv()->getSkillInventory()) {
				pb
					.writeShort(skill.first)
					.writeByte(skill.second);
			}
			
			pb
				.writeInt(0) // guild skills
				.writeInt(0)
				.writeByte(1)
				.writeByte(1)
				.writeLong(0)
				.writeInt(0)
				.writeShort(0)
				.writeInt(0x10243FA)
				.writeInt(0)
				.writeByte(0)
				.writeInt(0)
				.writeShort(0);

			pb
				.writeInt(1) // quests
				.writeInt(11000) //questid
				.writeInt(1)
				.writeInt(11000)
				.writeInt(0)
				.writeByte(0)

				.writeInt(0)
				.writeInt(0) // guild name
				.writeByte(0)
				.writeInt(0)
				.writeInt(0)
				.writeInt(1) // quests
				.writeInt(11000)
				.writeByte(0)
				.writeInt(0);

			pb
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeShort(0)
				.writeInt(-1)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeShort(0);
			

			for (int i = 1; i <= 7; i++) {
				pb
					.writeByte(i)
					.writeByte(1)
					.writebool(false)
					.writebool(false)
					.writebool(false)
					.writebool(false)
					.writeInt(0)
					.writeLong(0)
					.writeLong(0)
					.writeShort(-1)
					.writeZeroBytes(116)
					.writeByte(0)
					.writeShort(1)
					.writeByte(1)
					.writeZeroBytes(101)
					.writeInt(-1)
					.writeZeroBytes(30);

			}

			pb.writeInt(3);
			// exactly same as above
			for (int i = 0; i < 3; i++) {
				pb
					.writeByte(i)
					.writeByte(1)
					.writeInt(0)
					.writeZeroBytes(20)
					.writeShort(-1)
					.writeZeroBytes(116)
					.writeByte(0)
					.writeShort(1)
					.writeByte(1)
					.writeZeroBytes(101)
					.writeInt(-1)
					.writeZeroBytes(30);
			}

			pb
				.writeLong(0)
				.finishPacket(0x150);

			return pb;

		}

		PacketBuilder dungeonStageClearAck() {

			PacketBuilder pb;
			pb
				.writeLong(0)
				.writeLong(1)
				.finishPacket(0x471);

			return pb;

		}

		PacketBuilder dungeonDropItem() {
			int 道具數量 = 0;
			PacketBuilder pb;
			pb.writeInt(0);
			for (int i = 0; i < 道具數量; i++) {
				pb.writeInt(0);
				pb.writeInt(0);
				pb.writebool(false);
				pb.writeFloat(0);
			}
			// 位置
			pb.writeFloat(0);
			pb.writeFloat(0);
			pb.writeFloat(0);

			pb.finishPacket(0xBF);

			return pb;

		}

		PacketBuilder BuffAck() {
			PacketBuilder pb;
			pb
				.writeInt(0)

				.finishPacket(0x195);
			return pb;
		}

		PacketBuilder Buff(int playerid, bool unk, int type, float time, float duration) {
			PacketBuilder pb;
			pb
				.writeLong(playerid)
				.writebool(unk)
				.writeByte(type)
				.writeFloat(time)
				.writeFloat(duration)

				.finishPacket(0x196);
			return pb;
		}

		PacketBuilder SummonAck() {
			PacketBuilder pb;
			pb
				.writeInt(0)

				.finishPacket(0x98);
			return pb;
		}

		PacketBuilder Summon(PacketReader* pr) {
			PacketBuilder pb;

				for (int i = 39/*0*/; i < (pr->getLength() + 39); i++) {
					pb.writeByte(pr->getPacket()[i]);
				}

				pb.finishPacket(0x99);
			return pb;
		}

		PacketBuilder RebirthAck() {
			PacketBuilder pb;
			pb
				.writeInt(0)

				.writeInt(0)
				.writeInt(30) // 復活石數量
				.writeInt(0)
				.writebool(true)

				.finishPacket(0x154);
			return pb;
		}
	}
}